# -*- mode: snippet; require-final-newline: nil -*-
# name: dinic
# key: dinic
# binding: direct-keybinding
# --
class Dinic {
  int max_v;
  const static int INF = 1 << 28;
  struct edge { int to, cap, rev; };
  vector<vector<edge>> *G;
  int *level;
  int *iter;

 public:

  explicit Dinic(int n) : max_v(n)
  {
    level = new int[max_v];
    iter  = new int[max_v];
    G = new vector<vector<edge>>(max_v);
  }

  ~Dinic()
  {
    delete G;
    delete[] level;
    delete[] iter;
  }

  void add_edge(int from, int to, int cap) {
    (*G)[from].push_back((edge){to, cap, (int)(*G)[to].size()});
    (*G)[to].push_back((edge){from, 0, (int)(*G)[from].size()-1});
  }

  void bfs(int s) {
    memset(level, -1, sizeof(level[0]) * max_v);
    queue<int> que;
    level[s] = 0;
    que.push(s);
    while (!que.empty()) {
      int v = que.front();
      que.pop();
      for (auto e: (*G)[v]) {
        if (e.cap > 0 && level[e.to] < 0) {
          level[e.to] = level[v] + 1;
          que.push(e.to);
        }
      }
    }
  }

  int dfs(int v, int t, int f) {
    if (v == t) return f;
    for (int i = iter[v]; i < (int)(*G)[v].size(); i++) {
      edge &e = (*G)[v][i];
      if (e.cap > 0 && level[v] < level[e.to]) {
        int d = dfs(e.to, t, min(f, e.cap));
        if (d > 0) {
          e.cap -= d;
          (*G)[e.to][e.rev].cap += d;
          return d;
        }
      }
    }
    return 0;
  }

  int max_flow(int s, int t) {
    int flow = 0;
    for (;;) {
      bfs(s);
      if (level[t] < 0)
        return flow;
      memset(iter, 0, sizeof(iter[0]) * max_v);
      int f;
      while ((f = dfs(s, t, INF)) > 0)
        flow += f;
    }
  }
};
