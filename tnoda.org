#+TITLE: Emacs 初期化ファイルの本体
#+STARTUP: noptag
#+STARTUP: content
#+STARTUP: hidestars
#+STARTUP: indent
#+PROPERTY: padline no
#+PROPERTY: results silent
#+TAGS:  key(k) command(c) marmalade(m) git(g) svn(s) rubikitch(r)

* ユーティリティ
** ディレクトリ構成
*** prefix
#+NAME: tnoda-dotfiles-dir
#+BEGIN_SRC emacs-lisp :tangle no :exports yes
  (eval tnoda/dotfiles-dir)
#+END_SRC

*** elisp\_dir
#+NAME: tnoda-elisp-dir
#+BEGIN_SRC emacs-lisp :tangle yes
  (eval (defconst tnoda/elisp-dir (expand-file-name "elisp" tnoda/dotfiles-dir)))
#+END_SRC

*** info\_dir
#+NAME: tnoda-info-dir
#+BEGIN_SRC emacs-lisp :tangle yes
  (eval (defconst tnoda/info-dir (expand-file-name "share/info" tnoda/dotfiles-dir)))
#+END_SRC

*** src\_dir
#+NAME: tnoda-src-dir
#+BEGIN_SRC emacs-lisp :tangle yes
  (eval (defconst tnoda/src-dir (expand-file-name "src" tnoda/dotfiles-dir)))
#+END_SRC

*** bin\_dir
#+NAME: tnoda-bin-dir
#+BEGIN_SRC emacs-lisp :tangle yes
  (defconst tnoda/bin-dir (expand-file-name "bin" tnoda/dotfiles-dir))
#+END_SRC

*** emacs
#+NAME: emacs-app
#+BEGIN_EXAMPLE
  ~/.emacs.d/bin/emacs
#+END_EXAMPLE

** 行間を広くする関数 =tnoda/increase-line-spacing=.
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/increase-line-spacing ()
    (setq line-spacing 4))
#+END_SRC

** tnoda/require-or-package-install-from-url

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/require-or-package-install-from-url (feature url)
    "If feature FEATURE is not loaded, load it. If FEATURE is not
  a member of the list `features', then the feature is not loaded;
  so install the corresponding package from URL."
    (unless (require feature nil t)
      (-if-let (buf (url-retrieve-synchronously url))
          (progn
            (switch-to-buffer buf)
            (package-install-from-buffer)
            (require feature)))))

#+END_SRC


* Emacs

** Emacs 起動したらすぐ eshell を使えるようにする．
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'emacs-startup-hook 'eshell)
#+END_SRC

** Expand kill-ring-max to 300
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq kill-ring-max 300)
#+END_SRC

** Coding system in Windows settings
#+BEGIN_SRC emacs-lisp :tangle yes
  (when (eq system-type 'windows-nt)
    (setq default-file-name-coding-system 'cp932)
    (setq default-buffer-file-coding-system 'utf-8-unix)
    (setq default-process-coding-system '(cp932-dos . cp932-dos)))

#+END_SRC

** 表示
*** Full Screen; M-F toggles fullscreen.                                :key:

Originally retrieved from http://www.emacswiki.org/emacs/FullScreen#toc23, on 2013-07-07

#+BEGIN_SRC emacs-lisp :tangle yes
  (when (or (eq window-system 'mac)
            (eq window-system 'ns)
            (eq window-system 'x))
    (setq ns-use-native-fullscreen nil)
    
    (defun tnoda/toggle-fullscreen ()
      "Toggle full screen"
      (interactive)
      (if (frame-parameter nil 'fullscreen)
          (progn
            (set-frame-parameter nil 'fullscreen nil)
            (set-frame-position (selected-frame) 1 1)
            (set-frame-size (selected-frame) 80 42))
        (set-frame-parameter nil 'fullscreen 'fullboth)))

    (global-set-key (kbd "M-F") 'tnoda/toggle-fullscreen))

#+END_SRC

*** =s-f= でフォント切り替え．                                            :key:

+ デフォルトは Inconsolata + ヒラギノ丸ゴ
+ =s-f= で拡大・縮小

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/fontset-setup-mac
    ()

    (defvar tnoda/current-fontset 'default)

    (defun tnoda/fontset-mac-default ()
      (set-face-attribute 'default nil
                          :family "Inconsolata"
                          :height 160)
      (set-fontset-font (frame-parameter nil 'font)
                        'japanese-jisx0208
                        (font-spec :family "Hiragino Maru Gothic ProN" :size 16))
      (set-fontset-font (frame-parameter nil 'font)
                        'mule-unicode-0100-24ff
                        (font-spec :family "Ricty" :size 16))
      (set-fontset-font nil
                        '(#x0370 . #x03FF)
                        (font-spec :family "Helvetica" :size 16))
      (setq tnoda/current-fontset 'default))

    (defun tnoda/fontset-mac-retina ()
      (set-face-attribute 'default nil
                          :family "Inconsolata"
                          :height 240)
      (set-fontset-font (frame-parameter nil 'font)
                        'japanese-jisx0208
                        (font-spec :family "Hiragino Maru Gothic ProN" :size 24))
      (set-fontset-font (frame-parameter nil 'font)
                        'mule-unicode-0100-24ff
                        (font-spec :family "Ricty" :size 24))
      (set-fontset-font nil
                        '(#x0370 . #x03FF)
                        (font-spec :family "Helvetica" :size 24))
      (setq tnoda/current-fontset 'retina))

    (defun tnoda/fontset-toggle ()
      (interactive)
      (case tnoda/current-fontset
        ('default
          (tnoda/fontset-mac-retina))
        ('retina
         (tnoda/fontset-mac-default))
        (t
         (error "invalid fontset"))))

    (tnoda/fontset-mac-default)
    (global-set-key (kbd "s-f") 'tnoda/fontset-toggle))

  (defun tnoda/fontset-setup-windows
    ()
    (set-face-attribute 'default nil
                        :family "Inconsolata"
                        :height 144)
    (set-fontset-font t 'japanese-jisx0208 (font-spec :family "Meiryo"))
    (set-fontset-font t 'katakana-jisx0201 (font-spec :family "Meiryo"))
    (set-fontset-font t 'japanese-jisx0212 (font-spec :family "Meiryo"))
    (setq face-font-rescale-alist '(("メイリオ" . 0.96))))

  (defun tnoda/fontset-setup-ubuntu ()
    (set-face-attribute 'default nil
                        :family "Ricty"
                        :height 120))

  (cond ((or (eq window-system 'mac)
             (eq window-system 'ns))
         (tnoda/fontset-setup-mac))
        ((eq window-system 'w32)
         (tnoda/fontset-setup-windows))
        ((eq window-system 'x)
         (tnoda/fontset-setup-ubuntu)))

#+END_SRC

*** Solarized-dark theme

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package solarized-theme
    :ensure t
    :config
    (setq solarized-use-variable-pitch nil)
    (setq solarized-scale-org-headlines nil)
    (load-theme 'solarized-dark t))

#+END_SRC

Do manually as follows:

#+BEGIN_EXAMPLE
  M-x load-theme solarized-dark RET
#+END_EXAMPLE

*** ツールバーなどを表示しない．
#+BEGIN_SRC emacs-lisp :tangle yes
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
#+END_SRC

*** 起動画面を表示しない．
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq inhibit-startup-message t)
#+END_SRC

*** =font-lock= を有効にする．
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-font-lock-mode t)
#+END_SRC

*** 対応する括弧を表示させる．
#+BEGIN_SRC emacs-lisp :tangle yes
  (show-paren-mode 1)
  (set-face-background 'show-paren-match-face "darkgreen")
#+END_SRC．

*** モードラインに時刻を表示させる．
#+BEGIN_SRC emacs-lisp :tangle yes
  (display-time)
#+END_SRC

*** モードラインに行番号・列番号を表示させる．
#+BEGIN_SRC emacs-lisp :tangle yes
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC

*** Highlight a region

#+BEGIN_SRC emacs-lisp :tangle yes
  (transient-mark-mode 1)
  (set-face-foreground 'region "blue")

#+END_SRC

*** カーソルを点滅させない．
#+BEGIN_SRC emacs-lisp :tangle yes
  (blink-cursor-mode -1)
#+END_SRC

*** Ediff 関連のバッファを一つにまとめる．                        :rubikitch:

きっと auto-install.el で便利．

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC

*** Define a command to notify trailing whitespaces.                :command:
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/enable-show-trailing-whitespaces ()
    (interactive)
    (setq show-trailing-whitespace t))
#+END_SRC

*** バッテリー残量を表示する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (when (eq system-type 'darwin)
    (display-battery-mode 1))

#+END_SRC

*** =browse-url= で Firefox を開く．                              :command:
#+BEGIN_SRC emacs-lisp :tangle yes
  (when (eq system-type 'darwin)
    (setq browse-url-browser-function 'browse-url-generic
          browse-url-generic-program "open"
          browse-url-generic-args '("-a" "Firefox")))

#+END_SRC

*** C-c w invokes Dictionary.app.                                       :key:

Thanks to http://d.hatena.ne.jp/tunefs/20130212/p1.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/dictionary ()
    "dictionary.app"
    (interactive)
    (let ((url (concat "dict://" (read-from-minibuffer "" (current-word)))))
      (browse-url url)))
  (global-set-key (kbd "C-c w") 'tnoda/dictionary)

#+END_SRC

** キーバインド
*** Mac OS X's modifier settings
#+BEGIN_SRC emacs-lisp :tangle yes
  (when (eq system-type 'darwin)
    (setq mac-option-modifier 'super)
    (setq mac-command-modifier 'meta))

#+END_SRC

*** Windows key settings
#+BEGIN_SRC emacs-lisp :tangle yes
  (when (eq system-type 'windows-nt)
    (setq w32-pass-lwindow-to-system nil)
    (setq w32-lwindow-modifier 'meta))

#+END_SRC

*** =s-q= を無効に．誤爆したときのダメージが大きすぎる (=save-buffers-kill-emacs=) :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-unset-key (kbd "s-q"))
#+END_SRC

*** =C-h= で =delete-backward-char=.                                    :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key "\C-h" 'delete-backward-char)
#+END_SRC

*** =C-x o= を無効に．                                                :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-unset-key (kbd "C-x o"))
#+END_SRC

*** =C-x C-b= で =ibuffer=.                                             :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key "\C-x\C-b" 'ibuffer)
#+END_SRC

*** =M-/= で =hippie-expand=.                                           :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "M-/") 'hippie-expand)
#+END_SRC

*** =C-z= で =eshell=.                                                :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-z") 'eshell)
#+END_SRC

*** =C-x C-c= で =server-edit=. 代わりに =M-x ZZ= で Emacs を終了．     :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-x C-c") 'server-edit)
  (defalias 'ZZ 'save-buffers-kill-emacs)
#+END_SRC

*** =dired-mode= で =W= を押すと =wdired-mode= になる．                 :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'dired)
  (define-key dired-mode-map "W" 'wdired-change-to-wdired-mode)
#+END_SRC

*** =C-;= でウィンドウ切替か水平分割． =C-:= で垂直分割．   :key:rubikitch:
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/other-window-or-split-window-horizontally ()
    (interactive)
    (when (one-window-p) (split-window-horizontally))
    (other-window 1))
  (global-set-key (kbd "C-;") 'tnoda/other-window-or-split-window-horizontally)
  (global-set-key (kbd "C-:") 'split-window-vertically)
#+END_SRC

*** =C-M-;= で =follow-mode=                                :key:rubikitch:
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-M-;") 'follow-delete-other-windows-and-split)
#+END_SRC

*** =<f5>= で =compile= か =executable-interpret=                     :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/script-p ()
      (and (>= (buffer-size) 2)
           (save-restriction
             (widen)
             (string= "#!" (buffer-substring (point-min) (+ 2 (point-min)))))))
  (defun tnoda/compile-or-executable-interpret ()
    (interactive)
    (cond ((tnoda/script-p)
           (call-interactively 'executable-interpret))
          (t
           (call-interactively 'compile))))
  (global-set-key (kbd "<f5>") 'tnoda/compile-or-executable-interpret)
#+END_SRC

*** =C-m= で改行してインデント．                                      :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-m") 'newline-and-indent)
#+END_SRC

*** =C-x 4 q= で =tnoda/View-quit-other-window=.                      :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/View-quit-other-window ()
    (interactive)
    (save-selected-window
      (other-window 1)
      (call-interactively 'View-quit)))
  (define-key ctl-x-4-map (kbd "q") 'tnoda/View-quit-other-window)
#+END_SRC

*** =s-a= で =tnoda/kill-ring-save-whole-buffer=.                     :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/kill-ring-save-whole-buffer ()
    (interactive)
    (save-excursion
      (copy-region-as-kill (point-min) (point-max))))
  (global-set-key (kbd "s-a") 'tnoda/kill-ring-save-whole-buffer)
#+END_SRC

*** zap-up-to-char ~M-z~                                              :key:
#+begin_src emacs-lisp :tangle yes
  (require 'misc)
  (global-set-key (kbd "M-z") 'zap-up-to-char)

#+end_src

** ログと履歴
*** ログの記録行数を増やす．                                    :rubikitch:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq message-log-max 10000)
#+END_SRC

*** ミニバッファを再帰的に呼び出せるようにする．                :rubikitch:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq enable-recursive-minibuffers t)
#+END_SRC

*** 履歴を沢山保存する．                                        :rubikitch:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq history-length 1000)
#+END_SRC

*** ミニバッファで入力を取り消しても履歴に残す．                :rubikitch:

誤取消で入力が失われるのを防ぐため．

#+BEGIN_SRC emacs-lisp :tangle yes
  (defadvice abort-recursive-edit (before minibuffer-save activate)
    (when (eq (selected-window) (active-minibuffer-window))
      (add-to-history minibuffer-history-variable (minibuffer-contents))))
#+END_SRC

*** ファイル内のカーソル位置を記憶する．                          :rubikitch:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default save-place t)
  (require 'saveplace)
#+END_SRC

** カレンダー
*** 現在位置を設定する．
+ =calendar-latitude=
+ =calendar-longitude=
+ =calendar-location-name=

#+BEGIN_SRC emacs-lisp :tangle yes
  (load "~/.calendar-location.el" t)
#+END_SRC

** スクリプトファイルを保存するときには，モードを実行可能に設定する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'after-save-hook
            'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

** =exec-path=

*** Add =/Developer/usr/bin= to =exec-path=.
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'exec-path "/Developer/usr/bin")
#+END_SRC

*** =exec-path= に =~/.emacs.d/bin= を追加する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'exec-path tnoda/bin-dir)
#+END_SRC

*** =exec-path= に Homebrew を追加する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'exec-path "/opt/homebrew/bin")
#+END_SRC

*** =exec-path= に =/usr/texbin= を追加する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'exec-path "/usr/texbin")
#+END_SRC

** GC を減らして軽くする．                                       :rubikitch:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq gc-cons-threshold (* 16 gc-cons-threshold))
#+END_SRC

** yes/no の代わりに y/n.
#+BEGIN_SRC emacs-lisp :tangle yes
  (fset 'yes-or-no-p 'y-or-n-p)  
#+END_SRC

** 新規ファイルを確認無しに作成する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq confirm-nonexistent-file-or-buffer nil)
#+END_SRC

** ダイアログボックスを使わないようにする．                      :rubikitch:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq use-dialog-box nil)
  (defalias 'message-box 'message)
#+END_SRC

** キーストロークをエコーエリアに素早く表示する．                 :rubikitch:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq echo-keystrokes 0.1)
#+END_SRC

** 大きいファイルを開くときの警告を 32 MB 以上にする．             :rubikitch:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq large-file-warning-threshold (* 25 1025 1024))
#+END_SRC

** emacsclient
#+BEGIN_SRC emacs-lisp :tangle yes
  (server-start)
  (setq server-window 'pop-to-buffer)

#+END_SRC

** midnight: 深夜に不急と思われるバッファを消す．
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'midnight)
#+END_SRC

** =shell-mode= のバッファを消すときに確認しない．
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq kill-buffer-query-functions
        (remq 'process-kill-buffer-query-function
              kill-buffer-query-functions))
#+END_SRC

** インデントにタブを使わない．
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default indent-tabs-mode nil)
#+END_SRC

** 圧縮ファイルを読み書きできるようにする．
#+BEGIN_SRC emacs-lisp :tangle yes
  (auto-compression-mode t)
#+END_SRC

** Narrowing: (=C-x n n=), (=C-x n p=) を有効にする．
#+BEGIN_SRC emacs-lisp :tangle yes
  (put 'narrow-to-region 'disabled nil)
#+END_SRC

** 環境変数 =MANPATH= を設定する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (setenv "MANPATH" (mapconcat 'identity
                               (list (expand-file-name "shrea/man" tnoda/dotfiles-dir)
                                     "/opt/homebrew/share/man"
                                     "/Developer/usr/share/man"
                                     "/usr/share/man"
                                     "/usr/X11R6/man")
                               ":"))
#+END_SRC

** Search ~/opt/emacs/share/info~ and ~/opt/mew/share/info~ for Info files

#+begin_src emacs-lisp :tangle yes
  (setq Info-directory-list
        '("/opt/emacs/share/info" "/opt/mew/share/info"))

#+end_src

** Unified diff を表示する．                                     :rubikitch:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq diff-switches "-u")
#+END_SRC

** =C-x F=, =C-x K=, =C-x V=                                  :key:rubikitch:
#+BEGIN_SRC emacs-lisp :tangle yes
  (find-function-setup-keys)
#+END_SRC

** Conflict したマージファイルを開くときには =smerg-mode= を有効にする．
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'smerge-mode)
  (defun tnoda/try-smerge ()
    (save-excursion
      (goto-char (point-min))
      (when (re-search-forward smerge-begin-re nil t)
        (smerge-mode 1))))
  (add-hook 'find-file-hook 'tnoda/try-smerge)
#+END_SRC

** Printing

+ Printing by =ps-print-buffer-with-faces=.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq ps-multibyte-buffer 'non-latin-printer)
  (setq ps-lpr-command "c:/Program Files/Ghostgum/gsview/gsview32.exe")
  (setq ps-lpr-switches nil)
  (setq ps-printer-name nil)
  (setq ps-printer-name-option nil)
  (setq ps-paper-type 'a4)
  (setq ps-line-number t)
  (setq ps-print-header t)
  (setq ps-print-color-p t)

#+END_SRC

** auto-insert
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'autoinsert)
  (add-hook 'find-file-hook 'auto-insert)

#+END_SRC

** dired

Mac OS X's ls does not support the ~--dired~ option.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq dired-use-ls-dired nil)

#+END_SRC

** wdired
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'dired)
  (define-key dired-mode-map "e" 'wdired-change-to-wdired-mode)

#+END_SRC

** EWW

*** Block all images by default
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'eww)

  (defun tnoda/shr-block-all-images ()
      (interactive)
    (setq-local shr-blocked-images ".*"))

  (defun tnoda/shr-display-all-images ()
      (interactive)
    (setq-local shr-blocked-images nil))

  (add-hook 'eww-mode-hook 'tnoda/shr-block-all-images)

#+END_SRC

** flyspell-mode

*** Configure aspell

+ aspell を使う．
+ 英語日本語混じりの文章でエラーが出ないようなおまじない (ispell-skip-region-alist).

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default ispell-program-name "aspell")
  (eval-after-load "ispell"
    '(add-to-list 'ispell-skip-region-alist '("[^\000-\377]+")))
#+END_SRC

+ Configure ~.aspell.conf~

#+BEGIN_EXAMPLE
  lang en_US
#+END_EXAMPLE

*** =C-M-$= で =ispell-buffer=.                                       :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-M-$") 'ispell-buffer)
#+END_SRC

*** Bind flyspell-auto-correct-binding to ~s-;~                       :key:

#+begin_src emacs-lisp :tangle yes
  (setq flyspell-auto-correct-binding (kbd "s-;"))

#+end_src

*** Enable flyspell-mode in text buffers

#+begin_src emacs-lisp :tangle yes
  (--map (add-hook it 'flyspell-mode)
         '(markdown-mode-hook
           gfm-mode-hook
           org-mode-hook
           text-mode-hook
           latex-mode-hook))

#+end_src

** Disable VIPER
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq viper-mode nil)

#+END_SRC


* Global

** generic-x.el
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'generic-x)

#+END_SRC

** imenu.el
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'imenu)
  (setq imenu-max-item-length 80)
#+END_SRC

** subword-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/subword-mode-enable ()
    (subword-mode 1))
#+END_SRC

** sequential-commmand.el                                               :up:

#+BEGIN_SRC emacs-lisp :tangle yes
  (tnoda/require-or-package-install-from-url
   'sequential-command
   "https://gist.githubusercontent.com/tnoda/49797ef440b7a2166986/raw/sequential-command.el")
  (use-package sequential-command
    :ensure t
    :pin manual)

  (define-sequential-command sequential-command:home
    beginning-of-line beginning-of-buffer sequential-command:return)
  (define-sequential-command sequential-command:end
    end-of-line end-of-buffer sequential-command:return)

  (defun tnoda/sequential-command:upcase-backward-word ()
    (interactive)
    (upcase-word (- (1+ (sequential-command:count)))))
  (defun tnoda/sequential-command:capitalize-backward-word ()
    (interactive)
    (capitalize-word (- (1+ (sequential-command:count)))))
  (defun tnoda/sequential-command:downcase-backward-word ()
    (interactive)
    (downcase-word (- (1+ (sequential-command:count)))))

  (when (require 'org nil t)
    (define-sequential-command org-sequential-command:home
      org-beginning-of-line beginning-of-buffer sequential-command:return)
    (define-sequential-command org-sequential-command:end
      org-end-of-line end-of-buffer sequential-command:return))

  (defun tnoda/sequential-command-setup-keys ()
    "Rebind C-a, C-e, M-u, M-c, and M-l to sequential-command:* commands.
    If you use `org-mode', rebind C-a and C-e."
    (interactive)
    (global-set-key "\C-a" 'sequential-command:home)
    (global-set-key "\C-e" 'sequential-command:end)
    (global-set-key "\M-u" 'tnoda/sequential-command:upcase-backward-word)
    (global-set-key "\M-c" 'tnoda/sequential-command:capitalize-backward-word)
    (global-set-key "\M-l" 'tnoda/sequential-command:downcase-backward-word)
    (when (require 'org nil t)
      (define-key org-mode-map "\C-a" 'org-sequential-command:home)
      (define-key org-mode-map "\C-e" 'org-sequential-command:end)))

  (tnoda/sequential-command-setup-keys)

#+END_SRC

** uniquify.el                                                   :rubikitch:

ファイル名が同じファイルを複数開いたときに，
バッファ名にディレクトリ名を含めて区別しやすくする．

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
  (setq uniquify-ignore-buffers-re "*[^*]+*")
#+END_SRC名

** direx.el
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package direx
    :ensure t
    :config
    (define-key dired-mode-map (kbd "b") 'direx:jump-to-directory)
    (define-key direx:direx-mode-map (kbd "b") 'dired-jump))

#+END_SRC

** dired-x
#+BEGIN_SRC emacs-lisp :tangle yes
  (when (eq system-type 'windows-nt)
    (require 'dired-open)
    (setq dired-open-functions '(dired-open-guess-shell-alist))
    (let ((re (->> '("xlsx?" "pptx?" "docx?" "pdf" "jpg" "png" "bmp")
                (--map (concat "\\." it "\\'"))
                (-interpose "\\|")
                (apply 'concat))))
      (add-to-list 'dired-guess-shell-alist-user `(,re . ("explorer.exe")))))


#+END_SRC

** ido.el
#+BEGIN_SRC emacs-lisp :tangle yes
  (ido-mode 1)
  (ido-everywhere 1)
  (setq ido-slow-ftp-hosts '("ssh"))
  (setq ido-create-new-buffer 'always)
  (setq ido-file-extensions-order '(".org" ".rb"))
  (setq ido-enable-flex-matching t)
#+END_SRC

*** =C-x C-f= で URL を開く (ido-use-url-at-pint).
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq ido-use-url-at-point t)
#+END_SRC

** recentf-ext.el                                                :rubikitch:

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package recentf-ext
    :ensure t
    :bind
    ("C-@" . recentf-open-files)
    :config
    (setq recentf-max-saved-items 3000)
    (setq recentf-exclude '("/TAGS$" "/tmp/$" "\.html$" "/work/$" "/\.emacs\.bmk$" "~$"))
    (setq tnoda/recentf-exclude-org 
          (list
           "org_archive$"
           "/mobileorg.org$"
           "/COMMIT_EDITMSG$"
           (expand-file-name "~/diary")
           (expand-file-name "~/org/main\.org")
           (expand-file-name "~/org/notes\.org")))
    (setq recentf-exclude (append recentf-exclude tnoda/recentf-exclude-org))
    (remove-hook 'dired-mode-hook 'recentf-add-dired-directory))

#+END_SRC

** bookmark.el                                                   :rubikitch:
ファイル内の特定位置をマークする．
+ ブックマークに変更があれば即保存 (bookmark-save-flag).
+ 最近使ったブックマークを燁に持ってくる (tnoda/bookmark-arrange).

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq bookmark-save-flag 1)
  (setq bookmark-sort-flag nil)
  (defun tnoda/bookmark-arrange ()
    (let ((latest (bookmark-get-bookmark bookmark)))
      (setq bookmark-alist (cons latest (delq latest bookmark-alist))))
    (bookmark-save))
  (add-hook 'bookmark-after-jump-hook 'tnoda/bookmark-arrange)
#+END_SRC

** auto-save-buffers-enhanced.el
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package auto-save-buffers-enhanced
    :ensure t
    :config
    (auto-save-buffers-enhanced t)
    (setq auto-save-buffers-enhanced-interval 3)
    (setq auto-save-buffers-enhanced-quiet-save-p t))
#+END_SRC

** sense-region.el                                     :key:rubikitch:

=C-SPC= 連打で選択範囲が広がっていく．マークとポイントが対角線の矩形を選択できる．

#+BEGIN_SRC emacs-lisp :tangle yes
  (tnoda/require-or-package-install-from-url
   'sense-region
   "https://gist.githubusercontent.com/tnoda/1776988/raw/f1421879e6f9c96a1a0b9708bc8da0378f30e22b/sense-region.el")
  (sense-region-on)

#+END_SRC

*** =C-SPC= 連打で =mark-word= できるので，=M-@= を無効にする．あまり使わないし．
- Note taken on [2012-01-18 Wed 10:21] \\
  =M-@= は特等席すぎるので，他で使うことにする．anything にしようかな．．．
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-unset-key (kbd "M-@"))
#+END_SRC

** goto-chg.el                                                   :rubikitch:

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package goto-chg
    :ensure t)

#+END_SRC

*** Require
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'goto-chg)
#+END_SRC

*** =C-<= でカーソルを最後の編集場所に戻す (=goto-last-change=).            :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-<") 'goto-last-change)
#+END_SRC

*** =C->= でカーソルを次の編集場所に進める (=goto-last-change-reverse=). :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C->") 'goto-last-change-reverse)
#+END_SRC

** company-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :config

    ;; Retrieved from https://github.com/nsf/gocode/tree/master/emacs-company
    (setq company-tooltip-limit 20)
    (setq company-idle-delay .7)
    (setq company-echo-delay 0)
    (setq company-begin-commands '(self-insert-command))

    ;; Also retrieved from https://github.com/nsf/gocode/tree/master/emacs-company
    (custom-set-faces
     '(company-preview
       ((t (:foreground "darkgray" :underline t))))
     '(company-preview-common
       ((t (:inherit company-preview))))
     '(company-tooltip
       ((t (:background "lightgray" :foreground "black"))))
     '(company-tooltip-selection
       ((t (:background "steelblue" :foreground "white"))))
     '(company-tooltip-common
       ((((type x)) (:inherit company-tooltip :weight bold))
        (t (:inherit company-tooltip))))
     '(company-tooltip-common-selection
       ((((type x)) (:inherit company-tooltip-selection :weight bold))
        (t (:inherit company-tooltip-selection))))))
#+END_SRC

** paredit.el

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package paredit
    :ensure t
    :config
    (progn
      (setq parens-require-spaces nil)
      (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
      (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
      (add-hook 'lisp-mode-hook 'enable-paredit-mode)
      (add-hook 'ielm-mode-hook 'enable-paredit-mode)))

#+END_SRC


** open-junk-file.el                                       :rubikitch:

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package open-junk-file
    :ensure t)

#+END_SRC

*** Junk files will go to =~/.junk/=.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq open-junk-file-format "~/.junk/%Y%m%d-%H%M%S.")

#+END_SRC

*** =C-x f= opens a new junk file.                                    :key:

#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-x f") 'open-junk-file)

#+END_SRC


** text-adjust.el                                          :rubikitch:

#+BEGIN_SRC emacs-lisp :tangle yes
  (tnoda/require-or-package-install-from-url
   'mell
   "https://gist.githubusercontent.com/tnoda/dedb18a47780e9a50983/raw/eb99fe55f813f14b75009923301033cb17d601c2/mell.el")
  (tnoda/require-or-package-install-from-url
   'text-adjust
   "https://gist.githubusercontent.com/tnoda/dedb18a47780e9a50983/raw/eb99fe55f813f14b75009923301033cb17d601c2/text-adjust.el")

#+END_SRC

*** =kinsoku-ascii= がいつのまにか =kinsoku.el= から無くなっているので定義．
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'text-adjust)
  (defvar kinsoku-ascii t "Do kinsoku-shori for ASCII.")
#+END_SRC

*** =M-q= で =text-adjust-*= する．=C-u M-q= で =*-buffer=. =C-u C-u M-q= で =fill= だけ． :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/text-adjust (arg)
    (interactive "p")
    (case arg
      (16
       (call-interactively 'text-adjust-fill))
      (4
       (call-interactively 'text-adjust-codecheck-buffer)
       (call-interactively 'text-adjust-hankaku-buffer)
       (call-interactively 'text-adjust-space-buffer)
       (call-interactively 'text-adjust-fill-buffer))
      (t
       (call-interactively 'text-adjust-codecheck)
       (call-interactively 'text-adjust-hankaku)
       (call-interactively 'text-adjust-space)
       (call-interactively 'text-adjust-fill))))
  (global-set-key (kbd "M-q") 'tnoda/text-adjust)
#+END_SRC

*** 左マージンを考慮する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq adaptive-fill-regexp "[ \t]*")
  (setq adaptive-fill-mode t)
#+END_SRC

*** ？と！とを半角へ変換しないようにする．
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq text-adjust-hankaku-except "？！＠ー〜、，。．")
#+END_SRC

** smartparens
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smartparens
    :ensure t
    :config
    (require 'smartparens-config)
    (sp-use-paredit-bindings))

#+END_SRC

** YASnippet

Use YASnippet as a non-global minor mode.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet
    :ensure t
    :config
    (yas-reload-all))

#+END_SRC

** visual-regexp
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package visual-regexp
    :ensure t
    :config
    (global-set-key (kbd "C-M-%") 'vr/query-replace))

#+END_SRC

** ace-isearch
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ace-isearch
    :ensure t
    :config
    (global-ace-isearch-mode 1))

#+END_SRC

** avy

#+begin_src emacs-lisp :tangle yes
  (use-package avy
    :ensure t
    :config
    (global-set-key (kbd "C-c j") 'avy-goto-word-or-subword-1))

#+end_src

** ace-link
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ace-link
    :ensure t
    :config
    (ace-link-setup-default)
    (require 'org)
    (define-key org-mode-map (kbd "C-c M-o") 'ace-link-org))

#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flycheck
    :ensure t)

#+END_SRC

** hydra

#+begin_src emacs-lisp :tangle yes
  (use-package hydra
    :ensure t)

#+end_src

** EasyPG

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'epa)
  (setq epa-file-encrypt-to user-mail-address)

#+END_SRC

* Eshell
** Plan 9 Smart Shell
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'eshell)
  (require 'em-smart)
  (setq eshell-where-to-jump 'begin)
  (setq eshell-review-quick-commands nil)
  (setq eshell-smart-space-goes-to-end t)
#+END_SRC

** Bind =cycle-buffer= to =C-z= in eshell-mode.                    :key:

Pressing =C-z= toggles between an eshell buffer and another.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/eshell-toggle-key ()
    (define-key eshell-mode-map (kbd "C-z") 'bs-cycle-previous))
  (add-hook 'eshell-mode-hook 'tnoda/eshell-toggle-key)

#+END_SRC

** プロンプトの色を変える．
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'em-prompt)
  (set-face-foreground 'eshell-prompt "cyan")
#+END_SRC

** プロンプトに Git のブランチ名を表示．
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'vc-git)
  (defun tnoda/eshell-git-branch ()
    "Return the branch name surrounded by square brackets, 
  or nil if the current directory is not in a Git repsitory."
    (let ((branch (vc-git-working-revision (eshell/pwd))))
      (when (< 0 (length branch))
        (format "[%s]" branch))))
  
  (defun tnoda/eshell-prompt-function ()
    (mapconcat 'identity
               (delq nil (list
                          (abbreviate-file-name (eshell/pwd))
                          (tnoda/eshell-git-branch)
                          (if (= 0 (user-uid))
                              "# "
                            "$ ")))
               " "))
  
  (setq eshell-prompt-function 'tnoda/eshell-prompt-function)
#+END_SRC

** eshell-z

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package eshell-z
    :ensure t)

#+END_SRC


* Shell-mode
** Suppress echo-backs
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'shell-mode-hook
            (lambda ()
              (setq comint-process-echoes t)))
#+END_SRC

* Pcomplete
** Git ブランチのリストを返す関数 =tnoda/git-branches=.
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/git-branches ()
      (split-string (shell-command-to-string "git branch | sed -e 's/[ *]*//'")))
#+END_SRC

** Git でステータス変更があったファイルのリストを返す関数 =tnoda/git-modified-files=.
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/git-modified-files ()
      (split-string (shell-command-to-string "git status -s | sed -e 's/^.. *//'")))
#+END_SRC

** =m= (=git merge= へのエイリアス) を補完する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun pcomplete/m ()
    "Completion for `m' (`git merge')"
    (pcomplete-here* (tnoda/git-branches)))
#+END_SRC

** =co= (=git checkout= へのエイリアス) を補完する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun pcomplete/co ()
    "Completion for `co' (`git checkout')"
    (pcomplete-here* (tnoda/git-branches)))
#+END_SRC

** =bd= (=git branch -d= へのエイリアス) を補完する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun pcomplete/bd ()
    "Completion for `bd' (`git branch -d')"
    (pcomplete-here* (tnoda/git-branches)))
#+END_SRC

** =a= (=git add -p= へのエイリアス) を補完する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun pcomplete/a ()
    "Completion for `a' (`git add -p')"
    (while (pcomplete-here (tnoda/git-modified-files))))
#+END_SRC

** =git add= と =git rm= とをを補完する．

=git add= は新規ファイルの追加にのみ使用する．既存ファイルのステージングは =a=.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/git-untracked-files ()
    (split-string (shell-command-to-string "git status -s -u | sed -e 's/^...//'")))
  
  (defconst pcmpl-git-commands
    '("add" "bisect" "branch" "checkout" "clone"
      "commit" "diff" "fetch" "grep"
      "init" "log" "merge" "mv" "pull" "push" "rebase"
      "reset" "rm" "show" "status" "tag" )
    "List of `git' commands")
  
  (defun pcomplete/git ()
    "Completion for `git'"
    ;; Completion for the command argument.
    (pcomplete-here* pcmpl-git-commands)  
    ;; complete files/dirs forever if the command is `add' or `rm'
    (cond
     ((pcomplete-match (regexp-opt '("add") ))
      (while (pcomplete-here (tnoda/git-untracked-files))))
     ((pcomplete-match (regexp-opt '("rm" "reset" "mv")) 1)
      (while (pcomplete-here (pcomplete-entries))))))
#+END_SRC

** =d= (=git diff= へのエイリアス) を補完する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/git-unstaged-files ()
    "Return a list of files which are modified but unstaged."
    (split-string (shell-command-to-string "git status -s | egrep '^.M' | sed -e 's/^.M //'")))
  
  (defun pcomplete/d ()
    "Completion for `d' (`git diff')."
    (while (pcomplete-here (tnoda/git-unstaged-files))))
#+END_SRC

** =dc= (=git diff --cached= へのエイリアス) を補完する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/git-staged-files ()
    "Return a list of staged files."
    (split-string (shell-command-to-string "git status -s | egrep '^M' | sed -e 's/^M.//'")))
  
  (defun pcomplete/dc ()
    "Completion for `dc' (`git diff')."
    (while (pcomplete-here (tnoda/git-staged-files))))
#+END_SRC

* SKK
** =C-x C-j= で =skk-mode=.                                             :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ddskk
    :ensure t
    :config
    (require 'skk)
    (define-key ctl-x-map (kbd "C-j") 'skk-mode))

#+END_SRC

** =C-\= でも =skk-mode=.                                               :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-\\") 'skk-mode)
#+END_SRC

** =~/.skk.el= の設定
+ =skk-large-jisyo=
+ =skk-server-host=
+ =skk-server-portnum=
+ =skk-dcomp-activate=
+ =skk-today= / =skk-clock= で西暦表示 (=skk-data-ad=).
+ 読点句点の代わりに，「，」「．」を使う (=skk-rom-kana-rule-list=).
+ アノテーションを表示する (=skk-show-annotation=).
+ 見出し語と送り仮名が一致した候補を優先表示 (=skk-henkan-strict-okuri-precedence=).
+ 半角カナの入力規則を有効に (=skk-use-jisx0201-input-method=).

* Migemo

+ cmigemo を https://gist.github.com/1824249 の formula で =brew install= する．
+ migemo.el のインストールと設定は，http://d.hatena.ne.jp/samurai20000/20100907/1283791433 を参考にする．

** C/Migemo を使う．
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package migemo
    :ensure t
    :config
    (setq migemo-command "cmigemo")
    (setq migemo-options '("-q" "--emacs"))
    (setq migemo-dictionary "/opt/homebrew/Cellar/cmigemo/20110227/share/migemo/utf-8/migemo-dict")
    (setq migemo-user-dictionary nil)
    (setq migemo-regex-dictionary nil)
    (setq migemo-coding-system 'utf-8-unix)
    (load-library "migemo")
    (migemo-init)
    (setq search-whitespace-regexp nil))

#+END_SRC

* Mail/News/WWW
** Mew
*** Install script

#+BEGIN_SRC sh :tangle no
  cd src
  curl http://mew.org/Release/mew-6.7.tar.gz | tar zxf -
  cd mew-6.7
  ./configure --prefix=/opt/mew --with-emacs=/opt/emacs/bin/emacs
  make
  make install
  make install-info
  make install-jinfo

#+END_SRC

*** Windows
#+begin_src emacs-lisp :tangle yes
  (when (eq system-type 'windows-nt)
    (defconst tnoda/mew-windows-dir
      (expand-file-name "mew-6.6" tnoda/src-dir))
    (add-to-list 'load-path tnoda/mew-windows-dir))

#+end_src

*** Mac OS X/Ubuntu

#+begin_src emacs-lisp :tangle yes
  (when (or (eq system-type 'darwin)
            (eq system-type 'gnu/linux))
    (defconst tnoda/mew-prefix "/opt/mew")
    (add-to-list 'load-path
                 (expand-file-name "share/emacs/site-lisp/mew"
                                   tnoda/mew-prefix))
    (add-to-list 'exec-path
                 (expand-file-name "bin"
                                   tnoda/mew-prefix)))

#+end_src

*** 最小限の設定

=mail-user-agent= は =simple.el= で，=define-mail-user-agent= は =subr.el= で，それぞれ定義されている．

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'mew)
  (require 'simple)
  (setq mail-user-agent 'mew-user-agent)
  (define-mail-user-agent
    'mew-user-agent
    'mew-user-agent-compose
    'mew-draft-send-message
    'mew-draft-kill
    'mew-send-hook)
#+END_SRC

*** Cache passwords

#+begin_src emacs-lisp :tangle yes
  (setq mew-use-cached-passwd t)

#+end_src

*** 起動時にくるくる回らない．
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq mew-demo nil)
#+END_SRC

*** 起動時にメールを取得しない．
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq mew-auto-get nil)
#+END_SRC

*** 引用ラベルを簡潔にする．
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq mew-cite-fields '("From:"))
  (setq mew-cite-format "%s writes:\n")
#+END_SRC

*** Summary モードでは本文は不要なので，その分 subject を広くとる．
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq mew-summary-form '(type (5 date) " " (18 from) " " t (0 subj)))
#+END_SRC

*** 転送時に =Received:= と =Return-Path:= をヘッダから削る．
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq mew-field-delete-for-forwarding '("Received:" "Return-Path:"))
#+END_SRC

*** GnuPG を使う．
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq mew-prog-pgp "gpg")
#+END_SRC

*** 証明書の検証に失敗したり，証明書が無かったりする場合には SSL/TLS 接続しない．
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq mew-ssl-verify-level 2)
#+END_SRC

*** 添付ファイルのデフォルトの保存先は =~/tmp=.
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq mew-save-dir "~/tmp/")
#+END_SRC

*** 用事が済んだらすぐに SSH 接続を切る．
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq mew-ssh-keep-connection nil)
#+END_SRC

*** Hyper Estraier で検索する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq mew-search-method 'est)
#+END_SRC

*** Use stunnel4 on Ubunte 14.04

#+BEGIN_SRC emacs-lisp :tangle yes
  (when (eq system-type 'gnu/linux)
    (setq mew-prog-ssl "stunnel4"))

#+END_SRC

*** Set mew-ssl-cert-directory on Mac OS X

#+BEGIN_SRC emacs-lisp :tangle yes
  (when (eq system-type 'darwin)
    (setq mew-ssl-cert-directory (expand-file-name ".certs" (getenv "HOME"))))

#+END_SRC

*** =draft= と =message= とでは行間を広く表示する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'mew-draft-mode-hook 'tnoda/increase-line-spacing)
  (add-hook 'mew-message-mode-hook 'tnoda/increase-line-spacing)
#+END_SRC

*** =draft-mode= で Org のテーブル記法と箇条書きを有効にする．
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'mew-draft-mode-hook 'turn-on-orgstruct++)
  (add-hook 'mew-draft-mode-hook 'turn-on-orgtbl)
#+END_SRC

*** =.mew.el= の設定．
+ =mew-refile-guess-alist=
+ =mew-config-alist=

* Lang

** Clojure                                                       :marmalade:
*** Leiningen has been installed in =~/lein=.
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'exec-path (expand-file-name ".lein" "~/"))
#+END_SRC

*** clojure-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package clojure-mode
    :ensure t
    :config
    (define-key clojure-mode-map (kbd "C-:") nil)
    (defun tnoda/clojure-mode-hook ()
      (put-clojure-indent 'for-all 1)     ; for clojure.test.check
      (enable-paredit-mode)
      (subword-mode 1)
      (yas-minor-mode)
      (flyspell-prog-mode)
      (setq show-trailing-whitespace t)
      (setq buffer-save-without-query t))
    (add-hook 'clojure-mode-hook 'tnoda/clojure-mode-hook))

#+END_SRC

**** Yasnippet helper functions.
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/lein-root (&optional dir)
    (interactive)
    (setq dir (or dir default-directory))
    (if (file-exists-p (expand-file-name "project.clj" dir))
        (expand-file-name dir)
      (let ((new-dir (expand-file-name (file-name-as-directory "..") dir)))
        (unless (string-match "\\(^[[:alpha:]]:/$\\|^/[^\/]+:/?$\\|^/$\\)" dir)
          (tnoda/lein-root new-dir)))))
  
  (defun tnoda/lein-guess-namespace ()
    "Return the clojure namespace associated with the current buffer."
    (interactive)
    (replace-regexp-in-string "_" "-" (replace-regexp-in-string "/" "." (substring (file-name-sans-extension buffer-file-name)
                                                                                   (+ 4 (length (tnoda/lein-root)))))))
#+END_SRC

*** CIDER
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package cider
    :ensure t
    :pin melpa-stable
    :config
    (setq cider-repl-history "~/.emacs.d/cider-repl-history")
    (setq cider-repl-use-pretty-printing t)
    (setq cider-repl-use-clojure-font-lock nil)
    (setq cider-repl-wrap-history t)
    (setq cider-repl-history-size 3000)
    (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
    (add-hook 'cider-repl-mode-hook 'tnoda/clojure-mode-hook))

#+END_SRC

*** company-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'cider-mode-hook 'company-mode)
  (add-hook 'cider-repl-mode-hook 'company-mode)

#+END_SRC

*** Inferior Lisp Mode

**** Enable paredit-mode in inferior-lisp-mode.
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'inferior-lisp-mode-hook 'enable-paredit-mode)
#+END_SRC

**** =M-x run-lisp= で Clojure の REPL.                          :command:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq inferior-lisp-program (expand-file-name "~/.lein/lein repl"))
#+END_SRC

**** =inferior-lisp-mode= で paredit に =[]= と ={}= も括弧扱いさせる．
via http://stackoverflow.com/questions/8598116/paredit-curly-brace-matching-in-swank-clojure-repl

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/curly-brace-matching-fix ()
    (modify-syntax-entry ?\{ "(}")
    (modify-syntax-entry ?\} "){")
    (modify-syntax-entry ?\[ "(]")
    (define-key inferior-lisp-mode-map
      (kbd "DEL") 'paredit-backward-delete)
    (define-key inferior-lisp-mode-map
      (kbd "{") 'paredit-open-curly)
    (define-key inferior-lisp-mode-map
      (kbd "}") 'paredit-close-curly)
    (modify-syntax-entry ?\] ")[")
    (modify-syntax-entry ?~ "'   ")
    (modify-syntax-entry ?, "    ")
    (modify-syntax-entry ?^ "'")
    (modify-syntax-entry ?= "'"))
  
  (add-hook 'inferior-lisp-mode-hook 'tnoda/curly-brace-matching-fix)
#+END_SRC

** Ruby

*** ruby-mode
#+begin_src emacs-lisp :tangle yes
  (require 'ruby-mode)

#+end_src


*** smartparens-ruby
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'smartparens-ruby)
  (add-hook 'ruby-mode-hook 'smartparens-strict-mode)

#+END_SRC

*** =~/.rbenv/shims= を =exec-path= に追加する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'exec-path (expand-file-name "~/.rbenv/shims"))
#+END_SRC

*** =ruby-mode=
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/ruby-mode-hook ()
    (electric-pair-mode -1)
    (electric-indent-mode 1)
    (electric-layout-mode 1)
    (subword-mode 1)
    (setq show-trailing-whitespace t)
    (outline-minor-mode 1)
    (setq outline-regexp " *\\(def \\|class\\|module\\|describe \\|it \\)"))

  (add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.rake$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.gemspec$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.ru$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Gemfile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Capfile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Vagrantfile$" . ruby-mode))
  (add-to-list 'interpreter-mode-alist '("ruby" . ruby-mode))
  (setq ruby-use-encoding-map nil)
  (setq ruby-deep-indent-paren-style nil)
  (setq ruby-insert-encoding-magic-comment nil)
  (add-hook 'ruby-mode-hook 'tnoda/ruby-mode-hook)
#+END_SRC

*** Bind =ruby-interpolate= to =#=.
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun ruby-interpolate ()
    "In a double quoted string, interpolate."
    (interactive)
    (insert "#")
    (when (and
           (looking-back "\".*")
           (looking-at ".*\""))
      (insert "{}")
      (backward-char 1)))
  
  (define-key ruby-mode-map (kbd "#") 'ruby-interpolate)
#+END_SRC


*** =inf-ruby=

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package inf-ruby
    :ensure t
    :config
    (progn
      (add-to-list 'inf-ruby-implementations '("pry" . "pry -Ilib"))
      (setq inf-ruby-default-implementation
            (cond ((eq system-type 'darwin)
                   (progn
                     (setq inf-ruby-first-prompt-pattern
                           "^\\[[0-9]+\\] pry\\((.*)\\)> *")
                     (setq inf-ruby-prompt-pattern
                           "^\\[[0-9]+\\] pry\\((.*)\\)[>*\"'] *")
                     "pry"))
                  (t "ruby")))))

#+END_SRC

*** =C-m= を =reindent-then-newline-and-indent= に設定．              :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (define-key ruby-mode-map (kbd "RET") 'reindent-then-newline-and-indent)
#+END_SRC

*** =ruby-mode= の =C-M-a= で =tnoda/ruby-beginning-of-defun=.        :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/ruby-beginning-of-defun ()
    "Move backward to the beginning of the current defun"
    (interactive)
    (and (re-search-backward "\\bdef\\b" nil t)
         (beginning-of-line)))
  
  (define-key ruby-mode-map (kbd "C-M-a") 'tnoda/ruby-beginning-of-defun)
#+END_SRC

*** =ruby-mode= の =C-M-e= で =tnoda/ruby-end-of-defun=.              :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/ruby-beginning-of-defun-indent-level ()
    (save-excursion
      (end-of-line)
      (when (re-search-backward "^\\( *\\)def\\b" nil t)
        (length (match-string 1)))))
  
  (defun tnoda/ruby-end-of-defun ()
    "Move forward to the end of the current defun"
    (interactive)
    (let ((current-indent-level (tnoda/ruby-beginning-of-defun-indent-level)))
      (and current-indent-level
           (re-search-forward (concat "^"
                                      (make-string current-indent-level 32)
                                      "end\\b")
                              nil t)
           (forward-line 1))))
  
  (define-key ruby-mode-map (kbd "C-M-e") 'tnoda/ruby-end-of-defun)
#+END_SRC

*** =ruby-mode= の =C-M-h= で =tnoda/ruby-mark-defun=.                :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/ruby-mark-defun ()
    "Put mark at the end of the current defun, point at the beginning"
    (interactive)
    (flet ((ruby-beginning-of-defun (&optional arg) (tnoda/ruby-beginning-of-defun))
           (ruby-end-of-defun (&optional arg) (tnoda/ruby-end-of-defun)))
      (call-interactively 'mark-defun)))
  
  (define-key ruby-mode-map (kbd "C-M-h") 'tnoda/ruby-mark-defun)
#+END_SRC

*** =align-rules-list=. =M-x align= でコンマ区切りとハッシュを整列． :command:
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'align)
  (add-to-list 'align-rules-list
               '(ruby-comma-delimiter
                 (regexp . ",\\(\\s-*\\)[^# \t\n]")
                 (repeat . t)
                 (modes  . '(ruby-mode))))
  (add-to-list 'align-rules-list
               '(ruby-hash-literal
                 (regexp . "\\(\\s-*\\)=>\\s-*[^# \t\n]")
                 (repeat . t)
                 (modes  . '(ruby-mode))))
#+END_SRC


** Markdown

#+begin_src emacs-lisp :tangle yes
  (use-package markdown-mode
    :ensure t)

#+end_src


*** Use the =markdown= command located in =/opt/homebew/bin=
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/markdown-custom ()
    "markdown-mode-hook"
    (setq markdown-command (expand-file-name "markdown" "/opt/homebrew/bin")))
  (add-hook 'markdown-mode-hook 'tnoda/markdown-custom)
#+END_SRC

*** =.text= なファイルは =markdown-mode= で開く．
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'auto-mode-alist '("\\.text" . markdown-mode))
#+END_SRC

*** =.md= なファイルは =gfm-mode= で開く．

=gfm-mode= なファイルには，特製の =bin/gfm= を使う．

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'auto-mode-alist '("\\.md" . gfm-mode))

#+END_SRC

*** =<S-tab>= で =markdown-shifttab=.                                   :key:

デフォルトでは =markdown-shifttab= が =<S-iso-lefttab>= に割り当てられ
ているため．

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/markdown-shifttab-fix ()
    "Bind `markdown-shifttab' to <S-tab>"
    (local-set-key (kbd "<S-tab>") 'markdown-shifttab))
  
  (add-hook 'markdown-mode-hook 'tnoda/markdown-shifttab-fix)
  (add-hook 'gfm-mode-hook 'tnoda/markdown-shifttab-fix)
#+END_SRC

** Scala

*** scala-mode2
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package scala-mode2
    :ensure t
    :config
    (setq scala-indent:indent-value-expression nil)
    (setq scala-indent:align-parameters t)
    (setq scala-indent:align-forms t)

    (require 'smartparens-config)

    (defun tnoda/scala-mode-hook ()
      (tnoda/increase-line-spacing)
      (subword-mode 1)
      (electric-pair-mode -1)
      (turn-on-smartparens-strict-mode)
      (setq imenu-generic-expression
            '((nil "^ *\\(abstract \\|case \\)?\\(class\\|object\\) \\w+\\( extends [^\\{}]+\\)?.*" 0)
              (nil "^ *\\(override \\|implicit \\)?def .*" 0)
              (nil "\\( *trait .*\\){" 1))))

    (add-hook 'scala-mode-hook 'tnoda/scala-mode-hook)
    (add-hook 'scala-mode-hook 'yas-minor-mode-on))

#+END_SRC

*** ENSIME
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ensime
    :ensure t
    :config
    (setq ensime-sbt-perform-on-save nil)
    (setq ensime-scaladoc-stdlib-url-base
          (concat "file://"
                  (expand-file-name "Documents/Scala/scala-docs-2.11.2/api/scala-library/"
                                    (getenv "HOME"))))
    (setq ensime-javadoc-stdlib-url-base
          (concat "file://"
                  (expand-file-name "Documents/Java/jdk-8u25-docs/api/"
                                    (getenv "HOME"))))
    (add-hook 'scala-mode-hook 'ensime-scala-mode-hook))

#+END_SRC

*** pretty-mode.el
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'scala-mode-hook 'turn-on-pretty-mode)
  (pretty-add-keywords 'scala-mode '(("=>" . (string-to-char "⇒"))
                                     ("<=" . (string-to-char "≤"))
                                     (">=" . (string-to-char "≥"))
                                     ("!=" . (string-to-char "≠"))
                                     ("->" . (string-to-char "→"))
                                     ("<-" . (string-to-char "←"))
                                     ("&&" . (string-to-char "∧"))
                                     ("||" . (string-to-char "∨"))
                                     ("\\<compose\\>" . (string-to-char "◦") )))
  (font-lock-add-keywords
   'scala-mode
   '(("\\(!\\)[^=]" (0 (prog1 ()
                     (compose-region (match-beginning 1)
                                     (match-end 1)
                                     (string-to-char "¬")))))))
#+END_SRC

** Graphviz
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package graphviz-dot-mode
    :ensure t
    :config
    (setq graphviz-dot-indent-width 2))

#+END_SRC

** Python
*** Yasnippet

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'python-mode-hook 'yas-minor-mode)
#+END_SRC

*** pdb
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq gud-pdb-command-name
        (expand-file-name ".pyenv/versions/anaconda-2.3.0/lib/python2.7/pdb.py"
                          (getenv "HOME")))

#+END_SRC

*** Jedi.el
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package jedi
    :ensure t
    :config
    (add-hook 'python-mode-hook 'jedi:setup)
    (setq jedi:complete-on-dot t)
    (require 'python)
    (define-key python-mode-map (kbd "M-.") 'jedi:goto-definition)
    (define-key python-mode-map (kbd "M-,") 'jedi:goto-definition-pop-marker)
    (setq python-shell-completion-native nil))

  (use-package company-jedi
    :ensure t
    :config
    (defun tnoda/turn-on-company-jedi ()
      (add-to-list 'company-backends 'company-jedi))
    (add-hook 'python-mode-hook 'tnoda/turn-on-company-jedi))

#+END_SRC

*** EIP: Emacs IPython Notebook

#+begin_src emacs-lisp :tangle yes
  (use-package ein
    :ensure t
    :config
    (add-hook 'ein:connect-mode-hook 'ein:jedi-setup))

#+end_src

*** Flycheck
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'python)

  (defun tnoda/turn-on-flycheck-mode ()
    (flycheck-mode 1))
  (add-hook 'python-mode-hook 'tnoda/turn-on-flycheck-mode)

#+END_SRC

*** Smartparens
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'python)
  (add-hook 'python-mode-hook 'turn-on-smartparens-strict-mode)

#+END_SRC

** Golang

*** go-mode/gocode
#+BEGIN_SRC emacs-lisp :tangle no
  (defvar tnoda/gopath (expand-file-name "go" (getenv "HOME")))
  (defvar tnoda/gopath-bin (expand-file-name "bin" tnoda/gopath))

  (setenv "GOPATH" tnoda/gopath)
  (setenv "PATH" (concat (getenv "PATH") ":" tnoda/gopath-bin))
  (add-to-list 'exec-path tnoda/gopath-bin)

  (use-package go-mode
    :ensure t
    :mode "\\.go\\'"
    :config
    (defun tnoda/gofmt-before-save ()
      "The original version of go-fmt may break the kill-region function,
  if it has an advised version."
      (interactive)
      (when (eq major-mode 'go-mode)
        (sense-region-off)
        (gofmt)
        (sense-region-on)))

    (add-hook 'before-save-hook 'tnoda/gofmt-before-save)
    (add-hook 'go-mode-hook 'turn-on-smartparens-strict-mode)
    (add-hook 'go-mode-hook 'tnoda/increase-line-spacing)
    (add-hook 'go-mode-hook 'subword-mode)
    (add-hook 'go-mode-hook 'yas-minor-mode)

    (define-key go-mode-map (kbd "M-.") 'godef-jump)
    (define-key go-mode-map (kbd "M-,") 'pop-tag-mark)
    (define-key go-mode-map (kbd "C-c C-j") 'go-goto-imports)
    (define-key go-mode-map (kbd "C-c C-d") 'godoc)

    (defun tnoda/go-mode-tab-width ()
      (setq tab-width 4))

    (defun tnoda/go-mode-turn-off-auto-save-buffers ()
      (setq-local auto-save-buffers-enhanced-activity-flag nil))

    (add-hook 'go-mode-hook 'tnoda/go-mode-tab-width)
    (add-hook 'go-mode-hook 'tnoda/go-mode-turn-off-auto-save-buffers))
#+END_SRC

*** go-eldoc
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package go-eldoc
    :ensure t
    :config
    (add-hook 'go-mode-hook 'go-eldoc-setup))

#+END_SRC

*** flycheck
#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'go-mode-hook 'tnoda/turn-on-flycheck-mode)

#+END_SRC

*** goimports

https://godoc.org/golang.org/x/tools/cmd/goimports

#+BEGIN_SRC emacs-lisp :tangle no
  (setq gofmt-command "goimports")

#+END_SRC

*** company-go

https://github.com/nsf/gocode/tree/master/emacs-company

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package company-go
    :ensure t
    :init
    (use-package company
      :ensure t)
    :config
    (defun tnoda/enable-company-go ()
      (set (make-local-variable 'company-backends) '(company-go))
      (setq company-go-insert-arguments nil)
      (company-mode))

    (add-hook 'go-mode-hook 'tnoda/enable-company-go))
#+END_SRC

*** Go Oracle

https://godoc.org/golang.org/x/tools/oracle

#+BEGIN_QUOTE
  Before you can run the oracle, you must tell Emacs the analysis
  scope, which is done using the command:

  M-x go-oracle-set-scope

  This command prompts you for the analysis scope, described above,
  with words separated by spaces. The effect of go-oracle-set-scope
  persists across all oracle invocations until it is called again with
  a different value.

#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle no
  (load (expand-file-name "src/golang.org/x/tools/cmd/oracle/oracle.el"
                          (getenv "GOPATH")))
  ;; (add-hook 'go-mode-hook 'go-oracle-mode)

#+END_SRC

*** Rename
- http://permalink.gmane.org/gmane.comp.lang.go.general/140050
- http://mattn.kaoriya.net/software/lang/go/20150113141338.htm

#+BEGIN_SRC emacs-lisp :tangle no
  (load (expand-file-name "src/golang.org/x/tools/refactor/rename/go-rename.el"
                          (getenv "GOPATH")))
  (define-key go-mode-map (kbd "C-c C-r") 'go-rename)

#+END_SRC

** CSS

*** indent-offset
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/css-mode-indent-offset ()
    (setq-local css-indent-offset 2))

  (add-hook 'css-mode-hook 'tnoda/css-mode-indent-offset)

#+END_SRC

*** emmet-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package emmet-mode
    :ensure t
    :config
    (setq emmet-indentation 2)

    (defun tnoda/turn-on-emmet-mode ()
      (emmet-mode 1))

    (add-hook 'css-mode-hook 'tnoda/turn-on-emmet-mode)
    (add-hook 'css-mode-hook 'turn-on-smartparens-strict-mode))

#+END_SRC

** ESS (R)
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package ess-site
    :ensure ess
    :config
    (add-hook 'inferior-ess-mode-hook 'turn-on-smartparens-mode))

#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'exec-path (expand-file-name "~/Library/Haskell/bin"))

#+END_SRC

*** haskell-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package haskell-mode
    :ensure t
    :config
    (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
    (add-hook 'haskell-mode-hook 'turn-on-haskell-doc)
    (add-hook 'haskell-mode-hook 'turn-on-smartparens-mode)
    (add-hook 'haskell-mode-hook 'turn-off-pretty-mode)
    (add-hook 'haskell-mode-hook 'turn-on-haskell-decl-scan)
    (define-key haskell-mode-map (kbd "C-,") 'haskell-move-nested-left)
    (define-key haskell-mode-map (kbd "C-.") 'haskell-move-nested-right)
    (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-compile)
    (define-key haskell-mode-map (kbd "C-x C-d") nil)
    (define-key haskell-mode-map (kbd "C-c C-z") 'haskell-interactive-switch)
    (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-file)
    (define-key haskell-mode-map (kbd "C-c C-b") 'haskell-interactive-switch)
    (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
    (define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
    (define-key haskell-mode-map (kbd "C-c M-.") nil)
    (define-key haskell-mode-map (kbd "C-c C-d") nil)
    (eval-after-load "which-func"
      '(add-to-list 'which-func-modes 'haskell-mode))
    (eval-after-load "haskell-cabal"
      '(define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-compile)))

#+END_SRC

*** ghc
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ghc
    :ensure t
    :pin melpa-stable
    :config
    (autoload 'ghc-init "ghc" nil t)
    (autoload 'ghc-debug "ghc" nil t)
    (add-hook 'haskell-mode-hook 'ghc-init)
    (use-package company-ghc
      :ensure t
      :pin melpa-stable
      :config
      (require 'company)
      (add-to-list 'haskell-mode-hook 'company-mode)
      (add-to-list 'company-backends 'company-ghc)))

#+END_SRC

** C++
*** Keywords for competitive-programming macros
#+BEGIN_SRC emacs-lisp :tangle yes
  (font-lock-add-keywords
   'c++-mode
   '(("FOR" . font-lock-keyword-face)
     ("RFOR" . font-lock-keyword-face)
     ("REP" . font-lock-keyword-face)
     ("RREP" . font-lock-keyword-face)
     ("ALL" . font-lock-keyword-face)
     ("1000000007" . font-lock-constant-face)))

#+END_SRC

*** company-mode

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'c++-mode-hook 'company-mode)

  (use-package company-c-headers
    :ensure t
    :config
    (progn
      (when (eq system-type 'darwin)
        (add-to-list 'company-c-headers-path-system
                     "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1"))
      (add-to-list 'company-backends 'company-c-headers)))

#+END_SRC

*** google-c-style.el

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package google-c-style
    :ensure t
    :config
    (progn
      (add-hook 'c-mode-common-hook 'google-set-c-style)
      (add-hook 'c-mode-common-hook 'google-make-newline-indent)))

#+END_SRC

*** Semantic

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'cc-mode)
  (require 'semantic)

  (global-semanticdb-minor-mode 1)
  (global-semantic-idle-scheduler-mode 1)

  (semantic-mode 1)

  (semantic-add-system-include "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1" 'c++-mode)

#+END_SRC

*** flycheck

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flycheck
    :ensure t
    :config
    (defun tnoda/c++-mode-hook-flycheck ()
      (flycheck-mode 1)
      (setq flycheck-clang-language-standard "c++11"))
    (add-hook 'c++-mode-hook 'tnoda/c++-mode-hook-flycheck))

#+END_SRC

**** flycheck-google-cpplint
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package flycheck-google-cpplint
    :ensure t
    :config
    (custom-set-variables
     '(flycheck-c/c++-googlelint-executable
       (expand-file-name "bin/cpplint.py" default-directory))))

#+END_SRC

*** smartparens-mode

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'c++-mode-hook 'turn-on-smartparens-strict-mode)

#+END_SRC

*** Yasnippet

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'c++-mode-hook 'yas-minor-mode-on)

#+END_SRC

*** auto-insert
#+begin_src emacs-lisp
  (define-auto-insert
    '("\\.\\(CC?\\|cc\\|cxx\\|cpp\\|c++\\)\\'" . "C++ skeleton")
    '("Simple C++ skelton"
      "#include <cstdio>
  #include <cstring>
  #include <cmath>
  #include <climits>
  #include <iostream>
  #include <iomanip>
  #include <list>
  #include <stack>
  #include <queue>
  #include <vector>
  #include <map>
  #include <set>
  #include <string>
  #include <utility>
  #include <algorithm>
  #include <numeric>
  #include <functional>

  #define FOR(i,a,b) for (int i=(a);i<(b);i++)
  #define RFOR(i,a,b) for (int i=(b)-1;i>=(a);i--)
  #define REP(i,n) for (int i=0;i<(n);i++)
  #define RREP(i,n) for (int i=(n)-1;i>=0;i--)
  #define ALL(a) (a).begin(),(a).end()

  using namespace std;
  typedef long long ll;" \n \n
      _ \n \n
      "int main(int argc, char *argv[])
  {
    cin.tie(0);
    ios::sync_with_stdio(false);
      
    return 0;
  }
  " \n))

#+end_src

** LaTeX

*** AUCTeX

#+begin_src emacs-lisp :tangle yes
  (use-package tex-jp
    :ensure auctex
    :config
    (setq TeX-engine-alist '((pdfuptex "pdfupTeX"
                                       "ptex2pdf -u -e -ot '%S %(mode)'"
                                       "ptex2pdf -u -l -ot '%S %(mode)'"
                                       "euptex")))
    (setq japanese-TeX-engine-default 'pdfuptex)
    (setq japanese-LaTeX-default-style "jsarticle")
    (dolist (command '("pTeX" "pLaTeX" "pBibTeX" "jTeX" "jLaTeX" "jBibTeX" "Mendex"))
      (delq (assoc command TeX-command-list) TeX-command-list))
    (setq preview-image-type 'dvipng)
    (setq TeX-source-correlate-method 'synctex)
    (setq TeX-source-correlate-start-server t)
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
    (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

    (defun tnoda/TeX-command-list-config ()
      (add-to-list 'TeX-command-list
                   '("Latexmk"
                     "latexmk %t"
                     TeX-run-TeX nil (latex-mode) :help "Run Latexmk"))
      (add-to-list 'TeX-command-list
                   '("Latexmk-upLaTeX-pdfdvi"
                     "latexmk -e '$latex=q/uplatex %%O %S %(mode) %%S/' -e '$bibtex=q/upbibtex %%O %%B/' -e '$biber=q/biber %%O --bblencoding=utf8 -u -U --output_safechars %%B/' -e '$makeindex=q/upmendex %%O -o %%D %%S/' -e '$dvipdf=q/dvipdfmx %%O -o %%D %%S/' -norc -gg -pdfdvi %t"
                     TeX-run-TeX nil (latex-mode) :help "Run Latexmk-upLaTeX-pdfdvi"))
      (add-to-list 'TeX-command-list
                   '("Latexmk-LuaLaTeX"
                     "latexmk -e '$pdflatex=q/lualatex %%O %S %(mode) %%S/' -e '$bibtex=q/upbibtex %%O %%B/' -e '$biber=q/biber %%O --bblencoding=utf8 -u -U --output_safechars %%B/' -e '$makeindex=q/upmendex %%O -o %%D %%S/' -norc -gg -pdf %t"
                     TeX-run-TeX nil (latex-mode) :help "Run Latexmk-LuaLaTeX"))
      (add-to-list 'TeX-command-list
                   '("Latexmk-XeLaTeX"
                     "latexmk -e '$pdflatex=q/xelatex %%O %S %(mode) %%S/' -e '$bibtex=q/upbibtex %%O %%B/' -e '$biber=q/biber %%O --bblencoding=utf8 -u -U --output_safechars %%B/' -e '$makeindex=q/upmendex %%O -o %%D %%S/' -norc -gg -pdf %t"
                     TeX-run-TeX nil (latex-mode) :help "Run Latexmk-XeLaTeX"))
      (add-to-list 'TeX-command-list
                   '("Skim" "open -a Skim.app '%s.pdf'" TeX-run-command t nil))
      (add-to-list 'TeX-command-list
                   '("Evince"
                     "evince %s.pdf"
                     TeX-run-discard-or-function t t :help "Run Evince")))

    (add-hook 'LaTeX-mode-hook 'tnoda/TeX-command-list-config)


    ;; Skim
    (setq TeX-view-program-list
          '(("Skim"
             "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

    (cond ((eq system-type 'gnu/linux)
           (setq TeX-view-program-selection '((output-pdf "Evince"))))
          ((eq system-type 'darwin)
           (setq TeX-view-program-selection '((output-pdf "Skim")))))
    
    ;; RefTeX
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (setq reftex-plug-into-AUCTeX t)

    ;; kinsoku.el
    (setq kinsoku-limit 10))

#+end_src

** Octave

#+BEGIN_SRC elisp :tangle yes
  (require 'octave)
  (add-to-list 'auto-mode-alist '("\\.m$" . octave-mode))
  (add-hook 'octave-mode-hook
            (lambda ()
              (abbrev-mode 1)
              (auto-fill-mode 1)
              (smartparens-strict-mode 1)
              (if (eq window-system 'x)
                  (font-lock-mode 1))))
  (add-hook 'inferior-octave-mode-hook
            (lambda ()
              (turn-on-font-lock)
              (define-key inferior-octave-mode-map [up]
                'comint-previous-input)
              (define-key inferior-octave-mode-map [down]
                'comint-next-input)))
#+END_SRC

** Stan

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package stan-mode
    :config
    (add-hook 'stan-mode-hook 'smartparens-strict-mode)
    (use-package stan-snippets
      :ensure t
      :config
      (add-hook 'stan-mode-hook '(lambda () (yas-minor-mode t)))))
#+END_SRC


* Twitter

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package twittering-mode
    :ensure t
    :config
    (setq twittering-status-format "%s >\n%T\n")
    (setq twittering-use-master-password t))

#+END_SRC

* Helm

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm
    :ensure t
    :init
    (setq helm-command-prefix-key "C-c h")
    :bind
    ("M-y" . helm-show-kill-ring)
    :config
    (require 'helm-config)
    (require 'helm-mode)
    (require 'helm-eshell)
    (require 'helm-files)
    (require 'helm-grep)
    (require 'helm-info)
    (define-key ctl-x-map (kbd "C-j") 'skk-mode)
    (define-key ctl-x-map (kbd "b") 'helm-mini)
    (define-key helm-command-map (kbd "a") 'helm-apropos)
    (define-key helm-command-map (kbd "i") 'helm-info-emacs)
    (define-key helm-command-map (kbd "l") 'helm-locate)
    (define-key helm-command-map (kbd "m") 'helm-man-woman)
    (define-key helm-command-map (kbd "o") 'helm-occur)
    (define-key helm-command-map (kbd "r") 'helm-resume)
    (define-key helm-command-map (kbd "s") 'helm-semantic-or-imenu)
    (add-to-list 'helm-completing-read-handlers-alist '(find-file . nil))
    (add-to-list 'helm-completing-read-handlers-alist '(execute-extended-command . nil))
    (setq
     helm-google-suggest-use-curl-p t
     helm-scroll-amount 4 ; scroll 4 lines other window using M-<next>/M-<prior>
     helm-quick-update t  ; do not display invisible candidates
     helm-idle-delay 0.01 ; be idle for this many seconds, before updating in delayed sources.
     helm-input-idle-delay 0.01 ; be idle for this many seconds, before updating candidate buffer
     helm-ff-search-library-in-sexp t ; search for library in `require' and `declare-function' sexp.
     helm-split-window-default-side 'other ;; open helm buffer in another window
     )
    (set-face-attribute 'helm-selection
                        'nil
                        :background "DarkGreen"
                        :foreground "Gray94")
    (helm-mode 1)
    )

#+END_SRC

** helm-ls-git
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm-ls-git
    :ensure t
    :config
    (use-package helm
      :ensure t)
    (define-key helm-command-map (kbd "g") 'helm-ls-git-ls))

#+END_SRC


** helm-pydoc

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm-pydoc
    :ensure t
    :config
    (define-key python-mode-map (kbd "C-c C-d") 'helm-pydoc))

#+END_SRC

** helm-descbinds
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm-descbinds
    :ensure t
    :config
    (helm-descbinds-mode))

#+END_SRC

** helm-bm                                                       :rubikitch:

*** http://rubikitch.com/2014/11/22/helm-bm/

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package bm
    :ensure t
    :bind
    (("s-[" . bm-previous)
     ("s-]" . bm-next))
    :init
    (setq-default bm-buffer-persistence nil)
    (setq bm-restore-repository-on-load t)
    :config
    (add-hook 'find-file-hook 'bm-buffer-restore)
    (add-hook 'kill-buffer-hook 'bm-buffer-save)
    (add-hook 'after-save-hook 'bm-buffer-save)
    (add-hook 'after-revert-hook 'bm-buffer-restore)
    (add-hook 'vc-before-checkin-hook 'bm-buffer-save)
    (add-hook 'kill-emacs-hook '(lambda nil
                                  (bm-buffer-save-all)
                                  (bm-repository-save)))
    (set-face-foreground 'bm-face "darkgreen")
    (set-face-background 'bm-face "darkorange"))

  (use-package helm-bm
    :ensure t
    :config
    (use-package bm
      :ensure t)
    ;; migemoくらいつけようね
    ;; (push '(migemo) helm-source-bm)

    ;; annotationはあまり使わないので仕切り線で表示件数減るの嫌
    ;; (setq helm-source-bm (delete '(multiline) helm-source-bm))

    (defun bm-toggle-or-helm ()
      "2回連続で起動したらhelm-bmを実行させる"
      (interactive)
      (bm-toggle)
      (when (eq last-command 'bm-toggle-or-helm)
        (helm-bm)))
    (global-set-key (kbd "s-SPC") 'bm-toggle-or-helm)

    ;;; これがないとemacs -Qでエラーになる。おそらくバグ。
    (require 'compile))

#+END_SRC

** helm-gtags

http://tuhdo.github.io/c-ide.html

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm-gtags
    :ensure t
    :init
    (setq helm-gtags-prefix-key (kbd "C-c ;")
          helm-gtags-suggested-key-mapping t)
    :config
    (use-package helm
      :ensure t)
    (add-hook 'c-mode-hook 'helm-gtags-mode)
    (add-hook 'c++-mode-hook 'helm-gtags-mode)
    (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
    (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
    (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
    (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history))
#+END_SRC

* Org Mode

** org-mew.el
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'org-mew)
#+END_SRC

** Common
*** Require
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'org-habit)
#+END_SRC

*** Store per host org files in =~/org/= directory.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-directory "~/org")

#+END_SRC

*** Share org files using Dropbox

#+begin_src emacs-lisp :tangle yes
  (setq tnoda/org-dropbox-directory "~/Dropbox/org")

#+end_src


*** =org-extend-today-until=
My day really ends at two o'clock in the morning.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-extend-today-until 2)
#+END_SRC

*** =C-,== と =C-'== に割り当てられる =org-cycle-agenda-files= を無効にする．
#+BEGIN_SRC emacs-lisp :tangle yes
  (rassq-delete-all 'org-cycle-agenda-files org-mode-map)
#+END_SRC

*** =org-edit-special= 中は auto-save-buffers を停止する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (lexical-let ((previous-active-p))
    (defadvice org-edit-src-code (before tnoda/auto-save-buffers-toggle activate)
      "Disable auto-save-buffers."
      (setq previous-active-p  auto-save-buffers-enhanced-activity-flag)
      (setq auto-save-buffers-enhanced-activity-flag nil))
    (defadvice org-edit-src-exit (after tndoa/auto-save-buffers-toggle activate)
      "Recover auto-save-buffers."
      (setq auto-save-buffers-enhanced-activity-flag previous-active-p)))

#+END_SRC

停止しないと，src ブロックを編集している最中に，

#+BEGIN_QUOTE
foo.org has changed since visited or saved.  Save anyway? (y or n) !
foo.org changed on disk; really edit the buffer? (y, n, r or C-h) 
File on disk now will become a backup file if you save these changes.
#+END_QUOTE

と怒られる．

*** ~=code=~ の face を org-code から =font-lock-constant-face= に変更する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-emphasis-alist
        (cons '("=" font-lock-constant-face "<code>" "</code>" verbatim)
              (remove-if (lambda (x)
                           (equal "=" (car x)))
                         org-emphasis-alist)))
#+END_SRC

*** Suppress automatic sub/superscript conversion
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-use-sub-superscripts nil)

#+END_SRC

** 見出し入力の改善．
*** =C-M-RET= で =org-insert-substring=                                 :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (define-key org-mode-map (kbd "<C-M-return>") 'org-insert-subheading)
#+END_SRC

*** =C-u C-RET= で一レベル下の見出し， =C-u C-u C-RET= で一レベル上の見出し． :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun tnoda/org-insert-heading-respect-content (arg)
    (interactive "p")
    (org-insert-heading-respect-content arg)
    (case arg
      (4 (org-do-demote))
      (16 (org-do-promote))))
  
  (define-key org-mode-map (kbd "<C-return>") 'tnoda/org-insert-heading-respect-content)
#+END_SRC

** Link
*** =C-c l= で org-store-link.                                          :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC

*** Using links outside Org
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-c L") 'org-insert-link-global)
  (global-set-key (kbd "C-c o") 'org-open-at-point-global)

#+END_SRC

** Refile
main.org のトップレベルに refile できるようにする．

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-refile-targets
        '(("main.org.gpg" . (:level . 1))))

#+END_SRC

** Archive

#+begin_src emacs-lisp :tangle yes
  (setq org-archive-location "%s_archive.gpg::")

#+end_src

** ~TODO~

*** ~TODO~ keywords
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-todo-keywords
        '((sequence "TODO(t)" "STARTED(s)" "|" "DONE(d)")
          (sequence "WAITING(w@/!)" "|")
          (sequence "APPT(a)" "|")
          (sequence "|" "CANCELED(c@)")
          (sequence "|" "DEFERRED(f@)")
          (sequence "|" "DELEGATED(g@)")))
#+END_SRC

*** Customize Org TODO faces
#+BEGIN_SRC emacs-lisp :tangle yes
  (defface tnoda/org-todo
    '((t (:foreground "gray" :background "dark red" :bold t)))
    "Font for TODO keywords.")
  
  (defface tnoda/org-started
    '((t (:foreground "gold1" :background "gray10" :bold t)))
    "Font for STARTED keywords.")
  
  (defface tnoda/org-waiting
    '((t (:foreground "gray" :background "green4" :bold t)))
    "Font for WAITING keywords.")
  
  (defface tnoda/org-appt
    '((t (:foreground "gray" :background "DodgerBlue4" :bold t)))
    "Font for APPT keywords")
  
  (setq org-todo-keyword-faces
        '(("TODO" . tnoda/org-todo)
          ("STARTED" . tnoda/org-started)
          ("WAITING" . tnoda/org-waiting)
          ("APPT" . tnoda/org-appt)))
#+END_SRC

*** Automatically change to DONE when all children are done.
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to TODO otherwise."
    (let (org-log-done org-log-states)   ; turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
  
  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+END_SRC

Retrieved from [[info:org#Breaking%20down%20tasks][info:org#Breaking down tasks]]

*** =TODO= ステータスが =STARTED= に変化したらクロックを開始する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun sacha/org-clock-in-if-starting ()
    "Clock in when the task is marked STARTED."
    (when (and (string= org-state "STARTED")
               (not (string= org-last-state org-state)))
      (org-clock-in)))
  (add-hook 'org-after-todo-state-change-hook
            'sacha/org-clock-in-if-starting)
  ;; (defadvice org-clock-in (after sacha activate)
  ;;   "Set this task's status to 'STARTED'."
  ;;   (org-todo "STARTED"))
  (defun sacha/org-clock-out-if-waiting ()
    "Clock in when the task is marked STARTED."
    (when (and (string= org-state "WAITING")
               (not (string= org-last-state org-state)))
      (org-clock-out)))
  (add-hook 'org-after-todo-state-change-hook
            'sacha/org-clock-out-if-waiting)
#+END_SRC

** Tags

*** Globally defined tags
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-tag-persistent-alist '((:startgroup . nil)
                                   ("home" . ?h)
                                   ("office" . ?o)
                                   (:endgroup . nil)
                                   ("computer" . ?c)
                                   ("errands" . ?e)
                                   ("library" . ?l)
                                   ("reading" . ?r)))
#+END_SRC

** Capture

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-default-notes-file (expand-file-name "journal.org.gpg"
                                                 tnoda/org-dropbox-directory))
  (define-key global-map "\C-cc" 'org-capture)

#+END_SRC

*** Templates

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-capture-templates
        '(("j" "Journal" entry (file+datetree "") "* %?   %T\n"
           :prepend t
           :clock-keep t
           :empty-lines 1
           :kill-buffer t)
          ("z" "Break" entry (file+datetree "") "* %?   :break:\n"
           :pretend t
           :clock-in t
           :clock-resume t)
          ("t" "Todo" entry (file+headline (expand-file-name "main.org.gpg"
                                                             tnoda/org-dropbox-directory) "Tasks")
           "* TODO %? \n\n%i\n%a\nAdded: %U\n\n"
           :prepend t
           :clock-keep t
           :empty-lines 1
           :kill-buffer t)
          ("m" "Morning Routine" entry (file+datetree "")
           "* Morning Routine %U\n\n%[~/Dropbox/org/morning_routine.org]"
           :prepend t
           :clock-in t
           :empty-lines 1
           :kill-buffer t)
          ("r" "Daily Review" entry (file "")
           "* Daily Review %U\n\n%[~/Dropbox/org/daily_review.org]"
           :prepend t
           :clock-in t
           :empty-lines 1
           :kill-buffer t)))

#+END_SRC

** GTD
*** =M-x flagged= で =flagged.org= を開く．
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun flagged ()
    (interactive)
    (find-file (expand-file-name "flagged.org" org-directory)))
#+END_SRC

*** =C-c g= で =org-clock-goto=.                                        :key:
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-c g") 'org-clock-goto)
#+END_SRC

** Trello

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-trello
    :ensure t
    :config
    (setq org-trello-files
          (list (expand-file-name "trello.org.gpg" tnoda/org-dropbox-directory))))

#+END_SRC

** Agenda

*** Agenda files
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-files (--map (expand-file-name (format "%s.org.gpg" it)
                                                  tnoda/org-dropbox-directory)
                                '("main"
                                  "journal"
                                  "projects"
                                  "habits"
                                  "trello")))

#+END_SRC

*** =<S-f7>= と =<f7>= に Org Agenda を開くコマンドを割り当てる．     :key:
- 一日の始まり→ =<S-f7>= ... Home Lists
- タスクの確認→ =<f7>= ... Daily Action List
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-custom-commands
        '(("H" "Home Lists"
           ((agenda "")
            (tags-todo "family")
            (tags-todo "home")
            (tags-todo "office")
            (tags-todo "errands")
            (tags-todo "computer")
            (tags "library")
            (tags "reading")))
          ("D" "Daily Action List"
           ((agenda "" ((org-agenda-ndays 1)
                        (org-agenda-sorting-strategy
                         (quote ((agenda time-up priority-down tag-up) )))
                        (org-deadline-warning-days 0)))))))

  (defun tnoda/org-agenda-home-lists ()
    (interactive)
    (org-agenda nil "H"))
  (global-set-key (kbd "<S-f7>") 'tnoda/org-agenda-home-lists)
  (defun tnoda/org-agenda-daily-action-list ()
    (interactive)
    (org-agenda nil "D"))
  (global-set-key (kbd "<f7>") 'tnoda/org-agenda-daily-action-list)
#+END_SRC

*** そのほかの設定
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-include-diary t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-start-on-weekday nil)
#+END_SRC
*** Faces
#+BEGIN_SRC emacs-lisp :tangle yes
  (set-face-attribute 'org-column nil
                      :background "gray16"
                      :strike-through nil
                      :underline nil
                      :height 160
                      :family "Ricty")
  (set-face-attribute 'org-column-title nil
                      :background "grey30"
                      :underline t
                      :family "Ricty")
#+END_SRC

** Mobile

#+begin_src emacs-lisp :tangle yes
  (when (load "~/.org-mobile-encryption-password.el" t)
    (setq org-mobile-use-encryption t)
    (setq org-mobile-inbox-for-pull "~/org/flagged.org")
    (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg"))

#+end_src

** Exporting
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'org-export-backends 'beamer)
#+END_SRC

*** Latex
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'ox-latex)
  (setq org-latex-pdf-process
        (cond ((executable-find "/Library/TeX/texbin/lualatex")
               '("/Library/TeX/texbin/lualatex %b"))
              ((executable-find "/usr/texbin/lualatex")
               '("/usr/texbin/lualatex %b"))
              ((executable-find "/usr/local/bin/lualatex")
               '("/usr/local/bin/lualatex %b"))))
  (add-to-list 'org-latex-classes
               '("ltjsarticle"
                 "\\documentclass{ltjsarticle}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (setq org-latex-default-class "ltjsarticle")
  (setq org-latex-listings 'listings)
  (add-to-list 'org-latex-listings-langs '(scala "Scala"))
  (add-to-list 'org-latex-default-packages-alist '("" "luatexja" nil))
  (setq org-latex-packages-alist
        '(("" "luatexja-fontspec" nil)
          ("" "lmodern" nil)
          ("" "listings" nil)
          ("" "color" nil)))

#+END_SRC

*** Inhibit HTML validation link
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-html-validation-link nil)

#+END_SRC

*** Markdown
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'ox-md)

#+END_SRC
** Babel
*** Emacs Lisp 以外の言語も有効にする．
#+BEGIN_SRC emacs-lisp :tangle yes
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((sh . t)
     (emacs-lisp . t)
     (clojure . t)
     (scala . t)
     (ditaa . t)
     (dot . t)
     (haskell . t)
     (java . t)
     (js . t)
     (latex . t)
     (org . t)
     (python . t)
     (ruby . t)))

#+END_SRC

*** Ditaa
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-ditaa-jar-path
        (shell-command-to-string "brew ls ditaa | grep jar | tr -d '\n'"))
  (setq org-ditaa-eps-jar-path
        (expand-file-name "share/ditaa/DitaaEps.jar" tnoda/dotfiles-dir))
  (add-to-list 'org-babel-default-header-args:ditaa '(:eps . t))
  (add-to-list 'org-babel-default-header-args:ditaa '(:cmdline . "-S -E"))

#+END_SRC

*** Graphviz
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'org-babel-default-header-args:dot '(:cmdline . "-Teps"))

  (require 'graphviz-dot-mode)
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
#+END_SRC

*** コードブロックのフォント修飾は，Emacs が重くなるのでやめる．
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-src-fontify-natively nil)
#+END_SRC

*** コードブロックを確認無しに実行する．
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

*** Display/update images in org buffers after evaluation

#+begin_src emacs-lisp :tangle yes
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)

#+end_src

*** ipython.el

#+begin_src emacs-lisp :tangle yes
  (use-package ob-ipython
    :ensure t)

#+end_src


** Easy Templates
+ =<s= で =#+STARTUP: =
+ =<S= で =#+SETUPFILE: =
+ =<p= で =#+PROPERTY: =
+ =<b= で beamer

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-structure-template-alist
        (remove-if #'(lambda (x) (member (car x) '("s" "S" "p")))
                   org-structure-template-alist))
  (push '("s" "#+STARTUP: ") org-structure-template-alist)
  (push '("S" "#+SETUPFILE: %file ?") org-structure-template-alist)
  (push '("p" "#+PROPERTY: ") org-structure-template-alist)
  (push '("b" "# -*- org-src-fontify-natively: t -*-
  ,#+STARTUP: beamer
  ,#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
  ,#+TITLE: title
  ,#+AUTHOR: Takahrio Noda (@tnoda)
  ,#+DATE: [2001-01-01 Mon]
  ,#+BEAMER_THEME: Pittsburgh
  ,#+BEAMER_COLOR_THEME: solarized [accent=cyan]
  ,#+BEAMER_FONT_THEME: structurebold
  ,#+BEAMER_HEADER: \\beamertemplatenavigationsymbolsempty
  ,#+BEAMER_HEADER: \\usepackage{inconsolata}
  ,#+OPTIONS: toc:nil H:2
  "
  ) org-structure-template-alist)
#+END_SRC


* Ubuntu
** Toggle touchpad                                             :key:command:

#+BEGIN_SRC emacs-lisp :tangle yes
  (when (string= system-name "bluetail")
    (defvar tnoda/touchpad-enabled 1)

    (defun tnoda/toggle-touchpad-enabled ()
      (interactive)
      (setq tnoda/touchpad-enabled (logxor tnoda/touchpad-enabled 1))
      (shell-command-to-string (format "xinput set-prop 10 \"Device Enabled\" %d"
                                       tnoda/touchpad-enabled))
      (message (if (eq 1 tnoda/touchpad-enabled)
                   "touchpad enabled"
                 "touchpad disabled")))

    (global-set-key (kbd "<f12>") 'tnoda/toggle-touchpad-enabled))

#+END_SRC
